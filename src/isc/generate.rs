use serde_derive::{Deserialize, Serialize};

#[derive(Default, Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct IscConfig {
    pub api_version: String,
    pub operators: Vec<Catalog>,
    pub name: String,
    pub version: String,
}

#[derive(Default, Debug, Clone, Serialize, Deserialize)]
pub struct Catalog {
    pub catalog: String,
    pub packages: Vec<Package>,
}

#[derive(Default, Debug, Clone, Serialize, Deserialize)]
pub struct Package {
    pub name: String,
    pub bundles: Vec<Bundle>,
}

#[derive(Default, Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct Bundle {
    pub name: String,
}

impl IscConfig {
    pub fn new(api_v: String) -> Self {
        IscConfig {
            api_version: api_v.clone(),
            operators: vec![],
            name: env!("CARGO_PKG_NAME").to_string(),
            version: env!("CARGO_PKG_VERSION").to_string(),
        }
    }

    pub fn to_yaml(&self) -> String {
        let mut body = "".to_string();
        let yaml = format!(
            "\n---\napiVersion: mirror.openshift.io/{}
kind: ImageSetConfiguration
#metadata:
#  name: ImageSetConfiguration
#  annotations: 
#    autogenerated: '{} {}' 
mirror:
  operators:
",
            self.api_version, self.name, self.version
        );
        for ops in self.operators.iter() {
            body += &format!("  - catalog: {}\n", ops.catalog);
            body += &format!("    packages:");
            for pkg in ops.packages.iter() {
                body += &format!("\n    - name: {}", pkg.name);
                body += &format!("\n      bundles:");
                pkg.bundles.iter().for_each(|b| {
                    body += &format!("\n      - name: {}", b.name);
                });
            }
            body += &format!("\n");
        }
        let all = yaml + &body;
        all
    }
}
